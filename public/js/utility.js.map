{"version":3,"sources":["utilityFunctions.js"],"names":[],"mappingsfile":"utility.js","sourcesContent":["/**\r\n * Utility functions\r\n */\r\n\r\n// Returns a random color\r\n// Choose a format for returning the color\r\n// formats: 'rgb', null\r\nfunction randomColor(format = null){\r\n    var red = Math.floor((Math.random() * 255));\r\n    var green = Math.floor((Math.random() * 255));\r\n    var blue = Math.floor((Math.random() * 255));\r\n    if(format == \"rgb\")\r\n        var randomcolor = \"rgb(\"+red+\",\"+green+\",\"+blue+\")\";\r\n    else\r\n        var randomcolor = {red: red, green: green, blue: blue};\r\n\r\n    return randomcolor;\r\n}\r\n\r\n/**\r\n Returns the html-string representation of jQuery object.\r\n You can also replace the whole element with some html by passing html string as an attribute.\r\n Pavel Pravosud <pavel@pravosud.com>\r\n Licensed under MIT license in 2012\r\n https://github.com/rwz/jquery.outerHTML\r\n */\r\n(function ($) {\r\n    'use strict';\r\n\r\n    var jdiv = $('<div>'), div = jdiv.get(0);\r\n\r\n    var getter = ('outerHTML' in div) ?\r\n        // native support\r\n        function(){ return this.get(0).outerHTML; } :\r\n\r\n        // no native support\r\n        function(){ return jdiv.html(this.first().clone()).html(); };\r\n\r\n    $.fn.outerHTML = function(){\r\n        return arguments.length ?\r\n            this.replaceWith.apply(this, arguments) :\r\n            getter.call(this);\r\n    };\r\n\r\n}(jQuery));\r\n\r\n/*! https://mths.be/startswith v0.2.0 by @mathias */\r\nif (!String.prototype.startsWith) {\r\n    (function() {\r\n        'use strict'; // needed to support `apply`/`call` with `undefined`/`null`\r\n        var defineProperty = (function() {\r\n            // IE 8 only supports `Object.defineProperty` on DOM elements\r\n            try {\r\n                var object = {};\r\n                var $defineProperty = Object.defineProperty;\r\n                var result = $defineProperty(object, object, object) && $defineProperty;\r\n            } catch(error) {}\r\n            return result;\r\n        }());\r\n        var toString = {}.toString;\r\n        var startsWith = function(search) {\r\n            if (this == null) {\r\n                throw TypeError();\r\n            }\r\n            var string = String(this);\r\n            if (search && toString.call(search) == '[object RegExp]') {\r\n                throw TypeError();\r\n            }\r\n            var stringLength = string.length;\r\n            var searchString = String(search);\r\n            var searchLength = searchString.length;\r\n            var position = arguments.length > 1 ? arguments[1] : undefined;\r\n            // `ToInteger`\r\n            var pos = position ? Number(position) : 0;\r\n            if (pos != pos) { // better `isNaN`\r\n                pos = 0;\r\n            }\r\n            var start = Math.min(Math.max(pos, 0), stringLength);\r\n            // Avoid the `indexOf` call if no match is possible\r\n            if (searchLength + start > stringLength) {\r\n                return false;\r\n            }\r\n            var index = -1;\r\n            while (++index < searchLength) {\r\n                if (string.charCodeAt(start + index) != searchString.charCodeAt(index)) {\r\n                    return false;\r\n                }\r\n            }\r\n            return true;\r\n        };\r\n        if (defineProperty) {\r\n            defineProperty(String.prototype, 'startsWith', {\r\n                'value': startsWith,\r\n                'configurable': true,\r\n                'writable': true\r\n            });\r\n        } else {\r\n            String.prototype.startsWith = startsWith;\r\n        }\r\n    }());\r\n}\r\n"]}