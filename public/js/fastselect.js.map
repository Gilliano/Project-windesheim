{"version":3,"sources":["fastselect.js"],"names":[],"mappingsfile":"fastselect.js","sourcesContent":["(function(root, factory) {\r\n\r\n    if (typeof define === 'function' && define.amd) {\r\n        define(['jquery', 'fastsearch'], factory);\r\n    } else if (typeof module === 'object' && module.exports) {\r\n        module.exports = factory(require('jquery'), require('fastsearch'));\r\n    } else {\r\n        factory(root.jQuery);\r\n    }\r\n\r\n}(this, function($) {\r\n\r\n    var $document = $(document),\r\n        instanceNum = 0,\r\n        Fastsearch = $.fastsearch,\r\n        pickTo = Fastsearch.pickTo,\r\n        selectorFromClass = Fastsearch.selectorFromClass;\r\n\r\n    function Fastselect(inputElement, options) {\r\n\r\n        this.init.apply(this, arguments);\r\n\r\n    }\r\n\r\n    $.extend(Fastselect.prototype, {\r\n\r\n        init: function(inputElement, options) {\r\n\r\n            this.$input = $(inputElement);\r\n\r\n            this.options = pickTo($.extend(true, {}, Fastselect.defaults, options, {\r\n                placeholder: this.$input.attr('placeholder')\r\n            }), this.$input.data(), [\r\n                'url', 'loadOnce', 'apiParam', 'initialValue', 'userOptionAllowed'\r\n            ]);\r\n\r\n            this.ens = '.fastselect' + (++instanceNum);\r\n            this.hasCustomLoader = this.$input.is('input');\r\n            this.isMultiple = !!this.$input.attr('multiple');\r\n            this.userOptionAllowed = this.hasCustomLoader && this.isMultiple && this.options.userOptionAllowed;\r\n\r\n            this.optionsCollection = new OptionsCollection(pickTo({multipleValues: this.isMultiple}, this.options, [\r\n                'url', 'loadOnce', 'parseData', 'matcher'\r\n            ]));\r\n\r\n            this.setupDomElements();\r\n            this.setupFastsearch();\r\n            this.setupEvents();\r\n\r\n        },\r\n\r\n        setupDomElements: function() {\r\n\r\n            this.$el = $('<div>').addClass(this.options.elementClass);\r\n\r\n            this[this.isMultiple ? 'setupMultipleElement' : 'setupSingleElement'](function() {\r\n\r\n                this.updateDomElements();\r\n                this.$controls.appendTo(this.$el);\r\n                this.$el.insertAfter(this.$input);\r\n                this.$input.detach().appendTo(this.$el);\r\n\r\n            });\r\n\r\n        },\r\n\r\n        setupSingleElement: function(onDone) {\r\n\r\n            var initialOptions = this.processInitialOptions(),\r\n                toggleBtnText = initialOptions && initialOptions.length ? initialOptions[0].text : this.options.placeholder;\r\n\r\n            this.$el.addClass(this.options.singleModeClass);\r\n            this.$controls = $('<div>').addClass(this.options.controlsClass);\r\n            this.$toggleBtn = $('<div>').addClass(this.options.toggleButtonClass).text(toggleBtnText).appendTo(this.$el);\r\n            this.$queryInput = $('<input>').attr('placeholder', this.options.searchPlaceholder).addClass(this.options.queryInputClass).appendTo(this.$controls);\r\n\r\n            onDone.call(this);\r\n\r\n        },\r\n\r\n        setupMultipleElement: function(onDone) {\r\n\r\n            var self = this,\r\n                options = self.options,\r\n                initialOptions = this.processInitialOptions();\r\n\r\n            this.$el.addClass(options.multipleModeClass);\r\n            this.$controls = $('<div>').addClass(options.controlsClass);\r\n            this.$queryInput = $('<input>').addClass(options.queryInputClass).appendTo(this.$controls);\r\n\r\n            initialOptions && $.each(initialOptions, function(i, option) {\r\n\r\n                self.addChoiceItem(option);\r\n\r\n            });\r\n\r\n            onDone.call(this);\r\n\r\n        },\r\n\r\n        updateDomElements: function() {\r\n\r\n            this.$el.toggleClass(this.options.noneSelectedClass, !this.optionsCollection.hasSelectedValues());\r\n            this.adjustQueryInputLayout();\r\n\r\n        },\r\n\r\n        processInitialOptions: function() {\r\n\r\n            var self = this, options;\r\n\r\n            if (this.hasCustomLoader) {\r\n\r\n                options = this.options.initialValue;\r\n\r\n                $.isPlainObject(options) && (options = [options]);\r\n\r\n            } else {\r\n\r\n                options = $.map(this.$input.find('option:selected').get(), function(option) {\r\n\r\n                    var $option = $(option);\r\n\r\n                    return {\r\n                        text: $option.text(),\r\n                        value: $option.attr('value')\r\n                    };\r\n\r\n                });\r\n\r\n            }\r\n\r\n            options && $.each(options, function(i, option) {\r\n                self.optionsCollection.setSelected(option);\r\n            });\r\n\r\n            return options;\r\n\r\n        },\r\n\r\n        addChoiceItem: function(optionModel) {\r\n\r\n            $(\r\n                '<div data-text=\"' + optionModel.text + '\" data-value=\"' + optionModel.value + '\" class=\"' + this.options.choiceItemClass + '\">' +\r\n                   optionModel.text +\r\n                    '<button class=\"' + this.options.choiceRemoveClass + '\" type=\"button\">Ã—</button>' +\r\n                '</div>'\r\n            ).insertBefore(this.$queryInput);\r\n\r\n        },\r\n\r\n        setupFastsearch: function() {\r\n\r\n            var self = this,\r\n                options = this.options,\r\n                fastSearchParams = {};\r\n\r\n            pickTo(fastSearchParams, options, [\r\n                'resultsContClass', 'resultsOpenedClass', 'resultsFlippedClass', 'groupClass', 'itemClass', 'focusFirstItem',\r\n                'groupTitleClass', 'loadingClass', 'noResultsClass', 'noResultsText', 'focusedItemClass', 'flipOnBottom'\r\n            ]);\r\n\r\n            this.fastsearch = new Fastsearch(this.$queryInput.get(0), $.extend(fastSearchParams, {\r\n\r\n                wrapSelector: this.isMultiple ? this.$el : this.$controls,\r\n\r\n                minQueryLength: 0,\r\n                typeTimeout: this.hasCustomLoader ? options.typeTimeout : 0,\r\n                preventSubmit: true,\r\n                fillInputId: false,\r\n\r\n                responseFormat: {\r\n                    label: 'text',\r\n                    groupCaption: 'label'\r\n                },\r\n\r\n                onItemSelect: function($item, model, fastsearch) {\r\n\r\n                    var maxItems = options.maxItems;\r\n\r\n                    if (self.isMultiple && maxItems && (self.optionsCollection.getValues().length > (maxItems - 1))) {\r\n\r\n                        options.onMaxItemsReached && options.onMaxItemsReached(this);\r\n\r\n                    } else {\r\n\r\n                        self.setSelectedOption(model);\r\n                        self.writeToInput();\r\n                        !self.isMultiple && self.hide();\r\n                        options.clearQueryOnSelect && fastsearch.clear();\r\n\r\n                        if (self.userOptionAllowed && model.isUserOption) {\r\n                            fastsearch.$resultsCont.remove();\r\n                            delete fastsearch.$resultsCont;\r\n                            self.hide();\r\n                        }\r\n\r\n                        options.onItemSelect && options.onItemSelect.call(self, $item, model, self, fastsearch);\r\n\r\n                    }\r\n\r\n                },\r\n\r\n                onItemCreate: function($item, model) {\r\n\r\n                    model.$item = $item;\r\n                    model.selected && $item.addClass(options.itemSelectedClass);\r\n\r\n                    if (self.userOptionAllowed && model.isUserOption) {\r\n                        $item.text(self.options.userOptionPrefix + $item.text()).addClass(self.options.userOptionClass);\r\n                    }\r\n\r\n                    options.onItemCreate && options.onItemCreate.call(self, $item, model, self);\r\n\r\n                }\r\n\r\n            }));\r\n\r\n            this.fastsearch.getResults = function() {\r\n\r\n                if (self.userOptionAllowed && self.$queryInput.val().length > 1) {\r\n                    self.renderOptions();\r\n                }\r\n\r\n                self.getOptions(function() {\r\n                    self.renderOptions(true);\r\n                });\r\n\r\n            };\r\n\r\n        },\r\n\r\n        getOptions: function(onDone) {\r\n\r\n            var options = this.options,\r\n                self = this,\r\n                params = {};\r\n\r\n            if (this.hasCustomLoader) {\r\n\r\n                var query = $.trim(this.$queryInput.val());\r\n\r\n                if (query && options.apiParam) {\r\n                    params[options.apiParam] = query;\r\n                }\r\n\r\n                this.optionsCollection.fetch(params, onDone);\r\n\r\n            } else {\r\n\r\n                !this.optionsCollection.models && this.optionsCollection.reset(this.gleanSelectData(this.$input));\r\n                onDone();\r\n\r\n            }\r\n\r\n        },\r\n\r\n        namespaceEvents: function(events) {\r\n\r\n            return Fastsearch.prototype.namespaceEvents.call(this, events);\r\n\r\n        },\r\n\r\n        setupEvents: function() {\r\n\r\n            var self = this,\r\n                options = this.options;\r\n\r\n            if (this.isMultiple) {\r\n\r\n                this.$el.on(this.namespaceEvents('click'), function(e) {\r\n\r\n                    $(e.target).is(selectorFromClass(options.controlsClass)) && self.$queryInput.focus();\r\n\r\n                });\r\n\r\n                this.$queryInput.on(this.namespaceEvents('keyup'), function(e) {\r\n\r\n                    // if (self.$queryInput.val().length === 0 && e.keyCode === 8) {\r\n                    //     console.log('TODO implement delete');\r\n                    // }\r\n\r\n                    self.adjustQueryInputLayout();\r\n                    self.show();\r\n\r\n                }).on(this.namespaceEvents('focus'), function() {\r\n\r\n                    self.show();\r\n\r\n                });\r\n\r\n                this.$el.on(this.namespaceEvents('click'), selectorFromClass(options.choiceRemoveClass), function(e) {\r\n\r\n                    var $choice = $(e.currentTarget).closest(selectorFromClass(options.choiceItemClass));\r\n\r\n                    self.removeSelectedOption({\r\n                        value: $choice.attr('data-value'),\r\n                        text: $choice.attr('data-text')\r\n                    }, $choice);\r\n\r\n                });\r\n\r\n            } else {\r\n\r\n                this.$el.on(this.namespaceEvents('click'), selectorFromClass(options.toggleButtonClass), function() {\r\n\r\n                    self.$el.hasClass(options.activeClass) ? self.hide() : self.show(true);\r\n\r\n                });\r\n\r\n            }\r\n\r\n        },\r\n\r\n        adjustQueryInputLayout: function() {\r\n\r\n            if (this.isMultiple && this.$queryInput) {\r\n\r\n                var noneSelected = this.$el.hasClass(this.options.noneSelectedClass);\r\n\r\n                this.$queryInput.toggleClass(this.options.queryInputExpandedClass, noneSelected);\r\n\r\n                if (noneSelected) {\r\n\r\n                    this.$queryInput.attr({\r\n                        style: '',\r\n                        placeholder: this.options.placeholder\r\n                    });\r\n\r\n                } else {\r\n\r\n                    this.$fakeInput = this.$fakeInput || $('<span>').addClass(this.options.fakeInputClass);\r\n                    this.$fakeInput.html(this.$queryInput.val().replace(/\\s/g, '&nbsp;'));\r\n                    this.$queryInput.removeAttr('placeholder').css('width', this.$fakeInput.insertAfter(this.$queryInput).width() + 20);\r\n                    this.$fakeInput.detach();\r\n\r\n                }\r\n\r\n            }\r\n\r\n        },\r\n\r\n        show: function(focus) {\r\n\r\n            this.$el.addClass(this.options.activeClass);\r\n            focus ? this.$queryInput.focus() : this.fastsearch.handleTyping();\r\n\r\n            this.documentCancelEvents('on');\r\n\r\n        },\r\n\r\n        hide: function() {\r\n\r\n            this.$el.removeClass(this.options.activeClass);\r\n\r\n            this.documentCancelEvents('off');\r\n\r\n        },\r\n\r\n        documentCancelEvents: function(setup) {\r\n\r\n            Fastsearch.prototype.documentCancelEvents.call(this, setup, this.hide);\r\n\r\n        },\r\n\r\n        setSelectedOption: function(option) {\r\n\r\n            if (this.optionsCollection.isSelected(option.value)) {\r\n                return;\r\n            }\r\n\r\n            this.optionsCollection.setSelected(option);\r\n\r\n            var selectedModel = this.optionsCollection.findWhere(function(model) {\r\n                return model.value === option.value;\r\n            });\r\n\r\n            if (this.isMultiple) {\r\n\r\n                this.$controls && this.addChoiceItem(option);\r\n\r\n            } else {\r\n\r\n                this.fastsearch && this.fastsearch.$resultItems.removeClass(this.options.itemSelectedClass);\r\n                this.$toggleBtn && this.$toggleBtn.text(option.text);\r\n\r\n            }\r\n\r\n            selectedModel && selectedModel.$item.addClass(this.options.itemSelectedClass);\r\n\r\n            this.updateDomElements();\r\n\r\n        },\r\n\r\n        removeSelectedOption: function(option, $choiceItem) {\r\n\r\n            var removedModel = this.optionsCollection.removeSelected(option);\r\n\r\n            if (removedModel && removedModel.$item) {\r\n\r\n                removedModel.$item.removeClass(this.options.itemSelectedClass);\r\n\r\n            }\r\n\r\n            if ($choiceItem) {\r\n                $choiceItem.remove();\r\n            } else {\r\n                this.$el.find(selectorFromClass(this.options.choiceItemClass) + '[data-value=\"' + option.value + '\"]').remove();\r\n            }\r\n\r\n            this.updateDomElements();\r\n            this.writeToInput();\r\n\r\n        },\r\n\r\n        writeToInput: function() {\r\n\r\n            var values = this.optionsCollection.getValues(),\r\n                delimiter = this.options.valueDelimiter,\r\n                formattedValue = this.isMultiple ? (this.hasCustomLoader ? values.join(delimiter) : values) : values[0];\r\n\r\n            this.$input.val(formattedValue).trigger('change');\r\n\r\n        },\r\n\r\n        renderOptions: function(filter) {\r\n\r\n            var query = this.$queryInput.val();\r\n            var data;\r\n\r\n            if (this.optionsCollection.models) {\r\n                data = (filter ? this.optionsCollection.filter(query) : this.optionsCollection.models).slice(0);\r\n            } else {\r\n                data = [];\r\n            }\r\n\r\n            if (this.userOptionAllowed) {\r\n\r\n                var queryInList = this.optionsCollection.models && this.optionsCollection.findWhere(function(model) {\r\n                    return model.value === query;\r\n                });\r\n\r\n                query && !queryInList && data.unshift({\r\n                    text: query,\r\n                    value: query,\r\n                    isUserOption: true\r\n                });\r\n\r\n            }\r\n\r\n            this.fastsearch.showResults(this.fastsearch.storeResponse(data).generateResults(data));\r\n\r\n        },\r\n\r\n        gleanSelectData: function($select) {\r\n\r\n            var self = this,\r\n                $elements = $select.children();\r\n\r\n            if ($elements.eq(0).is('optgroup')) {\r\n\r\n                return $.map($elements.get(), function(optgroup) {\r\n\r\n                    var $optgroup = $(optgroup);\r\n\r\n                    return {\r\n                        label: $optgroup.attr('label'),\r\n                        items: self.gleanOptionsData($optgroup.children())\r\n                    };\r\n\r\n                });\r\n\r\n            } else {\r\n\r\n                return this.gleanOptionsData($elements);\r\n\r\n            }\r\n\r\n        },\r\n\r\n        gleanOptionsData: function($options) {\r\n\r\n            return $.map($options.get(), function(option) {\r\n                var $option = $(option);\r\n                return {\r\n                    text: $option.text(),\r\n                    value: $option.attr('value'),\r\n                    selected: $option.is(':selected')\r\n                };\r\n            });\r\n\r\n        },\r\n\r\n        destroy: function() {\r\n\r\n            $document.off(this.ens);\r\n            this.fastsearch.destroy();\r\n            this.$input.off(this.ens).detach().insertAfter(this.$el);\r\n            this.$el.off(this.ens).remove();\r\n\r\n            this.$input.data() && delete this.$input.data().fastselect;\r\n\r\n        }\r\n\r\n    });\r\n\r\n    function OptionsCollection(options) {\r\n\r\n        this.init(options);\r\n\r\n    }\r\n\r\n    $.extend(OptionsCollection.prototype, {\r\n\r\n        defaults: {\r\n            loadOnce: false,\r\n            url: null,\r\n            parseData: null,\r\n            multipleValues: false,\r\n            matcher: function(text, query) {\r\n\r\n                return text.toLowerCase().indexOf(query.toLowerCase()) > -1;\r\n\r\n            }\r\n        },\r\n\r\n        init: function(options) {\r\n\r\n            this.options = $.extend({}, this.defaults, options);\r\n            this.selectedValues = {};\r\n\r\n        },\r\n\r\n        fetch: function(fetchParams, onDone) {\r\n\r\n            var self = this,\r\n                afterFetch = function() {\r\n                    self.applySelectedValues(onDone);\r\n                };\r\n\r\n            if (this.options.loadOnce) {\r\n\r\n                this.fetchDeferred = this.fetchDeferred || this.load(fetchParams);\r\n                this.fetchDeferred.done(afterFetch);\r\n\r\n            } else {\r\n                this.load(fetchParams, afterFetch);\r\n            }\r\n\r\n        },\r\n\r\n        reset: function(models) {\r\n\r\n            this.models = this.options.parseData ? this.options.parseData(models) : models;\r\n            this.applySelectedValues();\r\n\r\n        },\r\n\r\n        applySelectedValues: function(onDone) {\r\n\r\n            this.each(function(option) {\r\n\r\n                if (this.options.multipleValues && option.selected) {\r\n\r\n                    this.selectedValues[option.value] = true;\r\n\r\n                } else {\r\n\r\n                    option.selected = !!this.selectedValues[option.value];\r\n\r\n                }\r\n\r\n            });\r\n\r\n            onDone && onDone.call(this);\r\n\r\n        },\r\n\r\n        load: function(params, onDone) {\r\n\r\n            var self = this,\r\n                options = this.options;\r\n\r\n            return $.get(options.url, params, function(data) {\r\n\r\n                self.models = options.parseData ? options.parseData(data) : data;\r\n\r\n                onDone && onDone.call(self);\r\n\r\n            });\r\n\r\n        },\r\n\r\n        setSelected: function(option) {\r\n\r\n            if (!this.options.multipleValues) {\r\n                this.selectedValues = {};\r\n            }\r\n\r\n            this.selectedValues[option.value] = true;\r\n            this.applySelectedValues();\r\n\r\n        },\r\n\r\n        removeSelected: function(option) {\r\n\r\n            var model = this.findWhere(function(model) {\r\n                return option.value === model.value;\r\n            });\r\n\r\n            model && (model.selected = false);\r\n\r\n            delete this.selectedValues[option.value];\r\n\r\n            return model;\r\n\r\n        },\r\n\r\n        isSelected: function(value) {\r\n\r\n            return !!this.selectedValues[value];\r\n\r\n        },\r\n\r\n        hasSelectedValues: function() {\r\n\r\n            return this.getValues().length > 0;\r\n\r\n        },\r\n\r\n        each: function(iterator) {\r\n\r\n            var self = this;\r\n\r\n            this.models && $.each(this.models, function(i, option) {\r\n\r\n                option.items ? $.each(option.items, function(i, nestedOption) {\r\n                    iterator.call(self, nestedOption);\r\n                }) : iterator.call(self, option);\r\n\r\n            });\r\n\r\n        },\r\n\r\n        where: function(predicate) {\r\n\r\n            var temp = [];\r\n\r\n            this.each(function(option) {\r\n                predicate(option) && temp.push(option);\r\n            });\r\n\r\n            return temp;\r\n\r\n        },\r\n\r\n        findWhere: function(predicate) {\r\n\r\n            var models = this.where(predicate);\r\n\r\n            return models.length ? models[0] : undefined;\r\n\r\n        },\r\n\r\n        filter: function(query) {\r\n\r\n            var self = this;\r\n\r\n            function checkItem(item) {\r\n                return self.options.matcher(item.text, query) ? item : null;\r\n            }\r\n\r\n            if (!query || query.length === 0) {\r\n                return this.models;\r\n            }\r\n\r\n            return $.map(this.models, function(item) {\r\n\r\n                if (item.items) {\r\n\r\n                    var filteredItems = $.map(item.items, checkItem);\r\n\r\n                    return filteredItems.length ? {\r\n                        label: item.label,\r\n                        items: filteredItems\r\n                    } : null;\r\n\r\n                } else {\r\n                    return checkItem(item);\r\n                }\r\n\r\n            });\r\n\r\n        },\r\n\r\n        getValues: function() {\r\n\r\n            return $.map(this.selectedValues, function(prop, key) {\r\n                return prop ? key : null;\r\n            });\r\n\r\n        }\r\n\r\n    });\r\n\r\n    Fastselect.defaults = {\r\n\r\n        elementClass: 'fstElement',\r\n        singleModeClass: 'fstSingleMode',\r\n        noneSelectedClass: 'fstNoneSelected',\r\n        multipleModeClass: 'fstMultipleMode',\r\n        queryInputClass: 'fstQueryInput',\r\n        queryInputExpandedClass: 'fstQueryInputExpanded',\r\n        fakeInputClass: 'fstFakeInput',\r\n        controlsClass: 'fstControls',\r\n        toggleButtonClass: 'fstToggleBtn',\r\n        activeClass: 'fstActive',\r\n        itemSelectedClass: 'fstSelected',\r\n        choiceItemClass: 'fstChoiceItem',\r\n        choiceRemoveClass: 'fstChoiceRemove',\r\n        userOptionClass: 'fstUserOption',\r\n\r\n        resultsContClass: 'fstResults',\r\n        resultsOpenedClass: 'fstResultsOpened',\r\n        resultsFlippedClass: 'fstResultsFilpped',\r\n        groupClass: 'fstGroup',\r\n        itemClass: 'fstResultItem',\r\n        groupTitleClass: 'fstGroupTitle',\r\n        loadingClass: 'fstLoading',\r\n        noResultsClass: 'fstNoResults',\r\n        focusedItemClass: 'fstFocused',\r\n\r\n        matcher: null,\r\n\r\n        url: null,\r\n        loadOnce: false,\r\n        apiParam: 'query',\r\n        initialValue: null,\r\n        clearQueryOnSelect: true,\r\n        minQueryLength: 1,\r\n        focusFirstItem: false,\r\n        flipOnBottom: true,\r\n        typeTimeout: 150,\r\n        userOptionAllowed: false,\r\n        valueDelimiter: ',',\r\n        maxItems: null,\r\n\r\n        parseData: null,\r\n        onItemSelect: null,\r\n        onItemCreate: null,\r\n        onMaxItemsReached: null,\r\n\r\n        placeholder: 'Choose option',\r\n        searchPlaceholder: 'Search options',\r\n        noResultsText: 'No results',\r\n        userOptionPrefix: 'Add '\r\n\r\n    };\r\n\r\n    $.Fastselect = Fastselect;\r\n    $.Fastselect.OptionsCollection = OptionsCollection;\r\n\r\n    $.fn.fastselect = function(options) {\r\n        return this.each(function() {\r\n            if (!$.data(this, 'fastselect')) {\r\n                $.data(this, 'fastselect', new Fastselect(this, options));\r\n            }\r\n        });\r\n    };\r\n\r\n    return $;\r\n\r\n}));\r\n"]}