{"version":3,"sources":["fastselect.js"],"names":[],"mappingsfile":"fastselect.js","sourcesContent":["(function(root, factory) {\n\n    if (typeof define === 'function' && define.amd) {\n        define(['jquery', 'fastsearch'], factory);\n    } else if (typeof module === 'object' && module.exports) {\n        module.exports = factory(require('jquery'), require('fastsearch'));\n    } else {\n        factory(root.jQuery);\n    }\n\n}(this, function($) {\n\n    var $document = $(document),\n        instanceNum = 0,\n        Fastsearch = $.fastsearch,\n        pickTo = Fastsearch.pickTo,\n        selectorFromClass = Fastsearch.selectorFromClass;\n\n    function Fastselect(inputElement, options) {\n\n        this.init.apply(this, arguments);\n\n    }\n\n    $.extend(Fastselect.prototype, {\n\n        init: function(inputElement, options) {\n\n            this.$input = $(inputElement);\n\n            this.options = pickTo($.extend(true, {}, Fastselect.defaults, options, {\n                placeholder: this.$input.attr('placeholder')\n            }), this.$input.data(), [\n                'url', 'loadOnce', 'apiParam', 'initialValue', 'userOptionAllowed'\n            ]);\n\n            this.ens = '.fastselect' + (++instanceNum);\n            this.hasCustomLoader = this.$input.is('input');\n            this.isMultiple = !!this.$input.attr('multiple');\n            this.userOptionAllowed = this.hasCustomLoader && this.isMultiple && this.options.userOptionAllowed;\n\n            this.optionsCollection = new OptionsCollection(pickTo({multipleValues: this.isMultiple}, this.options, [\n                'url', 'loadOnce', 'parseData', 'matcher'\n            ]));\n\n            this.setupDomElements();\n            this.setupFastsearch();\n            this.setupEvents();\n\n        },\n\n        setupDomElements: function() {\n\n            this.$el = $('<div>').addClass(this.options.elementClass);\n\n            this[this.isMultiple ? 'setupMultipleElement' : 'setupSingleElement'](function() {\n\n                this.updateDomElements();\n                this.$controls.appendTo(this.$el);\n                this.$el.insertAfter(this.$input);\n                this.$input.detach().appendTo(this.$el);\n\n            });\n\n        },\n\n        setupSingleElement: function(onDone) {\n\n            var initialOptions = this.processInitialOptions(),\n                toggleBtnText = initialOptions && initialOptions.length ? initialOptions[0].text : this.options.placeholder;\n\n            this.$el.addClass(this.options.singleModeClass);\n            this.$controls = $('<div>').addClass(this.options.controlsClass);\n            this.$toggleBtn = $('<div>').addClass(this.options.toggleButtonClass).text(toggleBtnText).appendTo(this.$el);\n            this.$queryInput = $('<input>').attr('placeholder', this.options.searchPlaceholder).addClass(this.options.queryInputClass).appendTo(this.$controls);\n\n            onDone.call(this);\n\n        },\n\n        setupMultipleElement: function(onDone) {\n\n            var self = this,\n                options = self.options,\n                initialOptions = this.processInitialOptions();\n\n            this.$el.addClass(options.multipleModeClass);\n            this.$controls = $('<div>').addClass(options.controlsClass);\n            this.$queryInput = $('<input>').addClass(options.queryInputClass).appendTo(this.$controls);\n\n            initialOptions && $.each(initialOptions, function(i, option) {\n\n                self.addChoiceItem(option);\n\n            });\n\n            onDone.call(this);\n\n        },\n\n        updateDomElements: function() {\n\n            this.$el.toggleClass(this.options.noneSelectedClass, !this.optionsCollection.hasSelectedValues());\n            this.adjustQueryInputLayout();\n\n        },\n\n        processInitialOptions: function() {\n\n            var self = this, options;\n\n            if (this.hasCustomLoader) {\n\n                options = this.options.initialValue;\n\n                $.isPlainObject(options) && (options = [options]);\n\n            } else {\n\n                options = $.map(this.$input.find('option:selected').get(), function(option) {\n\n                    var $option = $(option);\n\n                    return {\n                        text: $option.text(),\n                        value: $option.attr('value')\n                    };\n\n                });\n\n            }\n\n            options && $.each(options, function(i, option) {\n                self.optionsCollection.setSelected(option);\n            });\n\n            return options;\n\n        },\n\n        addChoiceItem: function(optionModel) {\n\n            $(\n                '<div data-text=\"' + optionModel.text + '\" data-value=\"' + optionModel.value + '\" class=\"' + this.options.choiceItemClass + '\">' +\n                   optionModel.text +\n                    '<button class=\"' + this.options.choiceRemoveClass + '\" type=\"button\">Ã—</button>' +\n                '</div>'\n            ).insertBefore(this.$queryInput);\n\n        },\n\n        setupFastsearch: function() {\n\n            var self = this,\n                options = this.options,\n                fastSearchParams = {};\n\n            pickTo(fastSearchParams, options, [\n                'resultsContClass', 'resultsOpenedClass', 'resultsFlippedClass', 'groupClass', 'itemClass', 'focusFirstItem',\n                'groupTitleClass', 'loadingClass', 'noResultsClass', 'noResultsText', 'focusedItemClass', 'flipOnBottom'\n            ]);\n\n            this.fastsearch = new Fastsearch(this.$queryInput.get(0), $.extend(fastSearchParams, {\n\n                wrapSelector: this.isMultiple ? this.$el : this.$controls,\n\n                minQueryLength: 0,\n                typeTimeout: this.hasCustomLoader ? options.typeTimeout : 0,\n                preventSubmit: true,\n                fillInputId: false,\n\n                responseFormat: {\n                    label: 'text',\n                    groupCaption: 'label'\n                },\n\n                onItemSelect: function($item, model, fastsearch) {\n\n                    var maxItems = options.maxItems;\n\n                    if (self.isMultiple && maxItems && (self.optionsCollection.getValues().length > (maxItems - 1))) {\n\n                        options.onMaxItemsReached && options.onMaxItemsReached(this);\n\n                    } else {\n\n                        self.setSelectedOption(model);\n                        self.writeToInput();\n                        !self.isMultiple && self.hide();\n                        options.clearQueryOnSelect && fastsearch.clear();\n\n                        if (self.userOptionAllowed && model.isUserOption) {\n                            fastsearch.$resultsCont.remove();\n                            delete fastsearch.$resultsCont;\n                            self.hide();\n                        }\n\n                        options.onItemSelect && options.onItemSelect.call(self, $item, model, self, fastsearch);\n\n                    }\n\n                },\n\n                onItemCreate: function($item, model) {\n\n                    model.$item = $item;\n                    model.selected && $item.addClass(options.itemSelectedClass);\n\n                    if (self.userOptionAllowed && model.isUserOption) {\n                        $item.text(self.options.userOptionPrefix + $item.text()).addClass(self.options.userOptionClass);\n                    }\n\n                    options.onItemCreate && options.onItemCreate.call(self, $item, model, self);\n\n                }\n\n            }));\n\n            this.fastsearch.getResults = function() {\n\n                if (self.userOptionAllowed && self.$queryInput.val().length > 1) {\n                    self.renderOptions();\n                }\n\n                self.getOptions(function() {\n                    self.renderOptions(true);\n                });\n\n            };\n\n        },\n\n        getOptions: function(onDone) {\n\n            var options = this.options,\n                self = this,\n                params = {};\n\n            if (this.hasCustomLoader) {\n\n                var query = $.trim(this.$queryInput.val());\n\n                if (query && options.apiParam) {\n                    params[options.apiParam] = query;\n                }\n\n                this.optionsCollection.fetch(params, onDone);\n\n            } else {\n\n                !this.optionsCollection.models && this.optionsCollection.reset(this.gleanSelectData(this.$input));\n                onDone();\n\n            }\n\n        },\n\n        namespaceEvents: function(events) {\n\n            return Fastsearch.prototype.namespaceEvents.call(this, events);\n\n        },\n\n        setupEvents: function() {\n\n            var self = this,\n                options = this.options;\n\n            if (this.isMultiple) {\n\n                this.$el.on(this.namespaceEvents('click'), function(e) {\n\n                    $(e.target).is(selectorFromClass(options.controlsClass)) && self.$queryInput.focus();\n\n                });\n\n                this.$queryInput.on(this.namespaceEvents('keyup'), function(e) {\n\n                    // if (self.$queryInput.val().length === 0 && e.keyCode === 8) {\n                    //     console.log('TODO implement delete');\n                    // }\n\n                    self.adjustQueryInputLayout();\n                    self.show();\n\n                }).on(this.namespaceEvents('focus'), function() {\n\n                    self.show();\n\n                });\n\n                this.$el.on(this.namespaceEvents('click'), selectorFromClass(options.choiceRemoveClass), function(e) {\n\n                    var $choice = $(e.currentTarget).closest(selectorFromClass(options.choiceItemClass));\n\n                    self.removeSelectedOption({\n                        value: $choice.attr('data-value'),\n                        text: $choice.attr('data-text')\n                    }, $choice);\n\n                });\n\n            } else {\n\n                this.$el.on(this.namespaceEvents('click'), selectorFromClass(options.toggleButtonClass), function() {\n\n                    self.$el.hasClass(options.activeClass) ? self.hide() : self.show(true);\n\n                });\n\n            }\n\n        },\n\n        adjustQueryInputLayout: function() {\n\n            if (this.isMultiple && this.$queryInput) {\n\n                var noneSelected = this.$el.hasClass(this.options.noneSelectedClass);\n\n                this.$queryInput.toggleClass(this.options.queryInputExpandedClass, noneSelected);\n\n                if (noneSelected) {\n\n                    this.$queryInput.attr({\n                        style: '',\n                        placeholder: this.options.placeholder\n                    });\n\n                } else {\n\n                    this.$fakeInput = this.$fakeInput || $('<span>').addClass(this.options.fakeInputClass);\n                    this.$fakeInput.html(this.$queryInput.val().replace(/\\s/g, '&nbsp;'));\n                    this.$queryInput.removeAttr('placeholder').css('width', this.$fakeInput.insertAfter(this.$queryInput).width() + 20);\n                    this.$fakeInput.detach();\n\n                }\n\n            }\n\n        },\n\n        show: function(focus) {\n\n            this.$el.addClass(this.options.activeClass);\n            focus ? this.$queryInput.focus() : this.fastsearch.handleTyping();\n\n            this.documentCancelEvents('on');\n\n        },\n\n        hide: function() {\n\n            this.$el.removeClass(this.options.activeClass);\n\n            this.documentCancelEvents('off');\n\n        },\n\n        documentCancelEvents: function(setup) {\n\n            Fastsearch.prototype.documentCancelEvents.call(this, setup, this.hide);\n\n        },\n\n        setSelectedOption: function(option) {\n\n            if (this.optionsCollection.isSelected(option.value)) {\n                return;\n            }\n\n            this.optionsCollection.setSelected(option);\n\n            var selectedModel = this.optionsCollection.findWhere(function(model) {\n                return model.value === option.value;\n            });\n\n            if (this.isMultiple) {\n\n                this.$controls && this.addChoiceItem(option);\n\n            } else {\n\n                this.fastsearch && this.fastsearch.$resultItems.removeClass(this.options.itemSelectedClass);\n                this.$toggleBtn && this.$toggleBtn.text(option.text);\n\n            }\n\n            selectedModel && selectedModel.$item.addClass(this.options.itemSelectedClass);\n\n            this.updateDomElements();\n\n        },\n\n        removeSelectedOption: function(option, $choiceItem) {\n\n            var removedModel = this.optionsCollection.removeSelected(option);\n\n            if (removedModel && removedModel.$item) {\n\n                removedModel.$item.removeClass(this.options.itemSelectedClass);\n\n            }\n\n            if ($choiceItem) {\n                $choiceItem.remove();\n            } else {\n                this.$el.find(selectorFromClass(this.options.choiceItemClass) + '[data-value=\"' + option.value + '\"]').remove();\n            }\n\n            this.updateDomElements();\n            this.writeToInput();\n\n        },\n\n        writeToInput: function() {\n\n            var values = this.optionsCollection.getValues(),\n                delimiter = this.options.valueDelimiter,\n                formattedValue = this.isMultiple ? (this.hasCustomLoader ? values.join(delimiter) : values) : values[0];\n\n            this.$input.val(formattedValue).trigger('change');\n\n        },\n\n        renderOptions: function(filter) {\n\n            var query = this.$queryInput.val();\n            var data;\n\n            if (this.optionsCollection.models) {\n                data = (filter ? this.optionsCollection.filter(query) : this.optionsCollection.models).slice(0);\n            } else {\n                data = [];\n            }\n\n            if (this.userOptionAllowed) {\n\n                var queryInList = this.optionsCollection.models && this.optionsCollection.findWhere(function(model) {\n                    return model.value === query;\n                });\n\n                query && !queryInList && data.unshift({\n                    text: query,\n                    value: query,\n                    isUserOption: true\n                });\n\n            }\n\n            this.fastsearch.showResults(this.fastsearch.storeResponse(data).generateResults(data));\n\n        },\n\n        gleanSelectData: function($select) {\n\n            var self = this,\n                $elements = $select.children();\n\n            if ($elements.eq(0).is('optgroup')) {\n\n                return $.map($elements.get(), function(optgroup) {\n\n                    var $optgroup = $(optgroup);\n\n                    return {\n                        label: $optgroup.attr('label'),\n                        items: self.gleanOptionsData($optgroup.children())\n                    };\n\n                });\n\n            } else {\n\n                return this.gleanOptionsData($elements);\n\n            }\n\n        },\n\n        gleanOptionsData: function($options) {\n\n            return $.map($options.get(), function(option) {\n                var $option = $(option);\n                return {\n                    text: $option.text(),\n                    value: $option.attr('value'),\n                    selected: $option.is(':selected')\n                };\n            });\n\n        },\n\n        destroy: function() {\n\n            $document.off(this.ens);\n            this.fastsearch.destroy();\n            this.$input.off(this.ens).detach().insertAfter(this.$el);\n            this.$el.off(this.ens).remove();\n\n            this.$input.data() && delete this.$input.data().fastselect;\n\n        }\n\n    });\n\n    function OptionsCollection(options) {\n\n        this.init(options);\n\n    }\n\n    $.extend(OptionsCollection.prototype, {\n\n        defaults: {\n            loadOnce: false,\n            url: null,\n            parseData: null,\n            multipleValues: false,\n            matcher: function(text, query) {\n\n                return text.toLowerCase().indexOf(query.toLowerCase()) > -1;\n\n            }\n        },\n\n        init: function(options) {\n\n            this.options = $.extend({}, this.defaults, options);\n            this.selectedValues = {};\n\n        },\n\n        fetch: function(fetchParams, onDone) {\n\n            var self = this,\n                afterFetch = function() {\n                    self.applySelectedValues(onDone);\n                };\n\n            if (this.options.loadOnce) {\n\n                this.fetchDeferred = this.fetchDeferred || this.load(fetchParams);\n                this.fetchDeferred.done(afterFetch);\n\n            } else {\n                this.load(fetchParams, afterFetch);\n            }\n\n        },\n\n        reset: function(models) {\n\n            this.models = this.options.parseData ? this.options.parseData(models) : models;\n            this.applySelectedValues();\n\n        },\n\n        applySelectedValues: function(onDone) {\n\n            this.each(function(option) {\n\n                if (this.options.multipleValues && option.selected) {\n\n                    this.selectedValues[option.value] = true;\n\n                } else {\n\n                    option.selected = !!this.selectedValues[option.value];\n\n                }\n\n            });\n\n            onDone && onDone.call(this);\n\n        },\n\n        load: function(params, onDone) {\n\n            var self = this,\n                options = this.options;\n\n            return $.get(options.url, params, function(data) {\n\n                self.models = options.parseData ? options.parseData(data) : data;\n\n                onDone && onDone.call(self);\n\n            });\n\n        },\n\n        setSelected: function(option) {\n\n            if (!this.options.multipleValues) {\n                this.selectedValues = {};\n            }\n\n            this.selectedValues[option.value] = true;\n            this.applySelectedValues();\n\n        },\n\n        removeSelected: function(option) {\n\n            var model = this.findWhere(function(model) {\n                return option.value === model.value;\n            });\n\n            model && (model.selected = false);\n\n            delete this.selectedValues[option.value];\n\n            return model;\n\n        },\n\n        isSelected: function(value) {\n\n            return !!this.selectedValues[value];\n\n        },\n\n        hasSelectedValues: function() {\n\n            return this.getValues().length > 0;\n\n        },\n\n        each: function(iterator) {\n\n            var self = this;\n\n            this.models && $.each(this.models, function(i, option) {\n\n                option.items ? $.each(option.items, function(i, nestedOption) {\n                    iterator.call(self, nestedOption);\n                }) : iterator.call(self, option);\n\n            });\n\n        },\n\n        where: function(predicate) {\n\n            var temp = [];\n\n            this.each(function(option) {\n                predicate(option) && temp.push(option);\n            });\n\n            return temp;\n\n        },\n\n        findWhere: function(predicate) {\n\n            var models = this.where(predicate);\n\n            return models.length ? models[0] : undefined;\n\n        },\n\n        filter: function(query) {\n\n            var self = this;\n\n            function checkItem(item) {\n                return self.options.matcher(item.text, query) ? item : null;\n            }\n\n            if (!query || query.length === 0) {\n                return this.models;\n            }\n\n            return $.map(this.models, function(item) {\n\n                if (item.items) {\n\n                    var filteredItems = $.map(item.items, checkItem);\n\n                    return filteredItems.length ? {\n                        label: item.label,\n                        items: filteredItems\n                    } : null;\n\n                } else {\n                    return checkItem(item);\n                }\n\n            });\n\n        },\n\n        getValues: function() {\n\n            return $.map(this.selectedValues, function(prop, key) {\n                return prop ? key : null;\n            });\n\n        }\n\n    });\n\n    Fastselect.defaults = {\n\n        elementClass: 'fstElement',\n        singleModeClass: 'fstSingleMode',\n        noneSelectedClass: 'fstNoneSelected',\n        multipleModeClass: 'fstMultipleMode',\n        queryInputClass: 'fstQueryInput',\n        queryInputExpandedClass: 'fstQueryInputExpanded',\n        fakeInputClass: 'fstFakeInput',\n        controlsClass: 'fstControls',\n        toggleButtonClass: 'fstToggleBtn',\n        activeClass: 'fstActive',\n        itemSelectedClass: 'fstSelected',\n        choiceItemClass: 'fstChoiceItem',\n        choiceRemoveClass: 'fstChoiceRemove',\n        userOptionClass: 'fstUserOption',\n\n        resultsContClass: 'fstResults',\n        resultsOpenedClass: 'fstResultsOpened',\n        resultsFlippedClass: 'fstResultsFilpped',\n        groupClass: 'fstGroup',\n        itemClass: 'fstResultItem',\n        groupTitleClass: 'fstGroupTitle',\n        loadingClass: 'fstLoading',\n        noResultsClass: 'fstNoResults',\n        focusedItemClass: 'fstFocused',\n\n        matcher: null,\n\n        url: null,\n        loadOnce: false,\n        apiParam: 'query',\n        initialValue: null,\n        clearQueryOnSelect: true,\n        minQueryLength: 1,\n        focusFirstItem: false,\n        flipOnBottom: true,\n        typeTimeout: 150,\n        userOptionAllowed: false,\n        valueDelimiter: ',',\n        maxItems: null,\n\n        parseData: null,\n        onItemSelect: null,\n        onItemCreate: null,\n        onMaxItemsReached: null,\n\n        placeholder: 'Choose option',\n        searchPlaceholder: 'Search options',\n        noResultsText: 'No results',\n        userOptionPrefix: 'Add '\n\n    };\n\n    $.Fastselect = Fastselect;\n    $.Fastselect.OptionsCollection = OptionsCollection;\n\n    $.fn.fastselect = function(options) {\n        return this.each(function() {\n            if (!$.data(this, 'fastselect')) {\n                $.data(this, 'fastselect', new Fastselect(this, options));\n            }\n        });\n    };\n\n    return $;\n\n}));\n"]}