{"version":3,"sources":["fastsearch.js"],"names":[],"mappingsfile":"fastsearch.js","sourcesContent":["(function(factory) {\r\n\r\n    if (typeof define === 'function' && define.amd) {\r\n        define(['jquery'], factory);\r\n    } else if (typeof module === 'object' && module.exports) {\r\n        module.exports = factory(require('jquery'));\r\n    } else {\r\n        factory(jQuery);\r\n    }\r\n\r\n}(function($) {\r\n\r\n    var $document = $(window.document),\r\n        instanceNum = 0,\r\n        eventStringRE = /\\w\\b/g,\r\n        keyMap = {\r\n            13: 'enter',\r\n            27: 'escape',\r\n            40: 'downArrow',\r\n            38: 'upArrow'\r\n        };\r\n\r\n    function Fastsearch(inputElement, options) {\r\n\r\n        this.init.apply(this, arguments);\r\n\r\n    }\r\n\r\n    $.extend(Fastsearch.prototype, {\r\n\r\n        init: function(inputElement, options) {\r\n\r\n            options = this.options = $.extend(true, {}, Fastsearch.defaults, options);\r\n\r\n            this.$input = $(inputElement);\r\n            this.$el = options.wrapSelector instanceof $ ? options.wrapSelector : this.$input.closest(options.wrapSelector);\r\n\r\n            Fastsearch.pickTo(options, this.$el.data(), [\r\n                'url', 'onItemSelect', 'noResultsText', 'inputIdName', 'apiInputName'\r\n            ]);\r\n\r\n            options.url = options.url || this.$el.attr('action');\r\n\r\n            this.ens = '.fastsearch' + (++instanceNum);\r\n            this.itemSelector = Fastsearch.selectorFromClass(options.itemClass);\r\n            this.focusedItemSelector = Fastsearch.selectorFromClass(options.focusedItemClass);\r\n\r\n            this.events();\r\n\r\n        },\r\n\r\n        namespaceEvents: function(events) {\r\n\r\n            var eventNamespace = this.ens;\r\n\r\n            return events.replace(eventStringRE, function(match) {\r\n                return match + eventNamespace;\r\n            });\r\n\r\n        },\r\n\r\n        events: function() {\r\n\r\n            var self = this,\r\n                options = this.options;\r\n\r\n            this.$input.on(this.namespaceEvents('keyup focus click'), function(e) {\r\n\r\n                keyMap[e.keyCode] !== 'enter' && self.handleTyping();\r\n\r\n            }).on(this.namespaceEvents('keydown'), function(e) {\r\n\r\n                keyMap[e.keyCode] === 'enter' && options.preventSubmit && e.preventDefault();\r\n\r\n                if (self.hasResults && self.resultsOpened) {\r\n\r\n                    switch (keyMap[e.keyCode]) {\r\n                        case 'downArrow': e.preventDefault(); self.navigateItem('down'); break;\r\n                        case 'upArrow': e.preventDefault(); self.navigateItem('up'); break;\r\n                        case 'enter': self.onEnter(e); break;\r\n                    }\r\n\r\n                }\r\n\r\n            });\r\n\r\n            this.$el.on(this.namespaceEvents('click'), this.itemSelector, function(e) {\r\n\r\n                e.preventDefault();\r\n                self.handleItemSelect($(this));\r\n\r\n            });\r\n\r\n            options.mouseEvents && this.$el.on(this.namespaceEvents('mouseleave'), this.itemSelector, function(e) {\r\n\r\n                $(this).removeClass(options.focusedItemClass);\r\n\r\n            }).on(this.namespaceEvents('mouseenter'), this.itemSelector, function(e) {\r\n\r\n                self.$resultItems.removeClass(options.focusedItemClass);\r\n                $(this).addClass(options.focusedItemClass);\r\n\r\n            });\r\n\r\n        },\r\n\r\n        handleTyping: function() {\r\n\r\n            var inputValue = $.trim(this.$input.val()),\r\n                self = this;\r\n\r\n            if (inputValue.length < this.options.minQueryLength) {\r\n\r\n                this.hideResults();\r\n\r\n            } else if (inputValue === this.query) {\r\n\r\n                this.showResults();\r\n\r\n            } else {\r\n\r\n                clearTimeout(this.keyupTimeout);\r\n\r\n                this.keyupTimeout = setTimeout(function() {\r\n\r\n                    self.$el.addClass(self.options.loadingClass);\r\n\r\n                    self.query = inputValue;\r\n\r\n                    self.getResults(function(data) {\r\n\r\n                        self.showResults(self.storeResponse(data).generateResults(data));\r\n\r\n                    });\r\n\r\n                }, this.options.typeTimeout);\r\n\r\n            }\r\n\r\n        },\r\n\r\n        getResults: function(callback) {\r\n\r\n            var self = this,\r\n                options = this.options,\r\n                formValues = this.$el.find('input, textarea, select').serializeArray();\r\n\r\n            if (options.apiInputName) {\r\n                formValues.push({'name': options.apiInputName, 'value': this.$input.val()});\r\n            }\r\n\r\n            $.get(options.url, formValues, function(data) {\r\n\r\n                callback(options.parseResponse ? options.parseResponse.call(self, data, self) : data);\r\n\r\n            });\r\n\r\n        },\r\n\r\n        storeResponse: function(data) {\r\n\r\n            this.responseData = data;\r\n            this.hasResults = data.length !== 0;\r\n\r\n            return this;\r\n\r\n        },\r\n\r\n        generateResults: function(data) {\r\n\r\n            var $allResults = $('<div>'),\r\n                options = this.options;\r\n\r\n            if (options.template) {\r\n                return $(options.template(data, this));\r\n            }\r\n\r\n            if (data.length === 0) {\r\n\r\n                $allResults.html(\r\n                    '<p class=\"' + options.noResultsClass + '\">' +\r\n                        (typeof options.noResultsText === 'function' ? options.noResultsText.call(this) : options.noResultsText) +\r\n                    '</p>'\r\n                );\r\n\r\n            } else {\r\n\r\n                if (this.options.responseType === 'html') {\r\n\r\n                    $allResults.html(data);\r\n\r\n                } else {\r\n\r\n                    this['generate' + (data[0][options.responseFormat.groupItems] ? 'GroupedResults' : 'SimpleResults')](data, $allResults);\r\n\r\n                }\r\n\r\n            }\r\n\r\n            return $allResults.children();\r\n\r\n        },\r\n\r\n        generateSimpleResults: function(data, $cont) {\r\n\r\n            var self = this;\r\n\r\n            this.itemModels = data;\r\n\r\n            $.each(data, function(i, item) {\r\n                $cont.append(self.generateItem(item));\r\n            });\r\n\r\n        },\r\n\r\n        generateGroupedResults: function(data, $cont) {\r\n\r\n            var self = this,\r\n                options = this.options,\r\n                format = options.responseFormat;\r\n\r\n            this.itemModels = [];\r\n\r\n            $.each(data, function(i, groupData) {\r\n\r\n                var $group = $('<div class=\"' + options.groupClass + '\">').appendTo($cont);\r\n\r\n                groupData[format.groupCaption] && $group.append(\r\n                    '<h3 class=\"' + options.groupTitleClass + '\">' + groupData[format.groupCaption] + '</h3>'\r\n                );\r\n\r\n                $.each(groupData.items, function(i, item) {\r\n\r\n                    self.itemModels.push(item);\r\n                    $group.append(self.generateItem(item));\r\n\r\n                });\r\n\r\n                options.onGroupCreate && options.onGroupCreate.call(self, $group, groupData, self);\r\n\r\n            });\r\n\r\n        },\r\n\r\n        generateItem: function(item) {\r\n\r\n            var options = this.options,\r\n                format = options.responseFormat,\r\n                url = item[format.url],\r\n                html = item[format.html] || item[format.label],\r\n                $tag = $('<' + (url ? 'a' : 'span') + '>').html(html).addClass(options.itemClass);\r\n\r\n            url && $tag.attr('href', url);\r\n\r\n            options.onItemCreate && options.onItemCreate.call(this, $tag, item, this);\r\n\r\n            return $tag;\r\n\r\n        },\r\n\r\n        showResults: function($content) {\r\n\r\n            if (!$content && this.resultsOpened) {\r\n                return;\r\n            }\r\n\r\n            this.$el.removeClass(this.options.loadingClass).addClass(this.options.resultsOpenedClass);\r\n\r\n            if (this.options.flipOnBottom) {\r\n                this.checkDropdownPosition();\r\n            }\r\n\r\n            this.$resultsCont = this.$resultsCont || $('<div>').addClass(this.options.resultsContClass).appendTo(this.$el);\r\n\r\n            if ($content) {\r\n\r\n                this.$resultsCont.html($content);\r\n                this.$resultItems = this.$resultsCont.find(this.itemSelector);\r\n                this.options.onResultsCreate && this.options.onResultsCreate.call(this, this.$resultsCont, this.responseData, this);\r\n\r\n            }\r\n\r\n            if (!this.resultsOpened) {\r\n\r\n                this.documentCancelEvents('on');\r\n                this.$input.trigger('openingResults');\r\n\r\n            }\r\n\r\n            if (this.options.focusFirstItem && this.$resultItems && this.$resultItems.length) {\r\n                this.navigateItem('down');\r\n            }\r\n\r\n            this.resultsOpened = true;\r\n\r\n        },\r\n\r\n        checkDropdownPosition: function() {\r\n\r\n            var flipOnBottom = this.options.flipOnBottom;\r\n            var offset = typeof flipOnBottom === 'boolean' && flipOnBottom ? 400 : flipOnBottom;\r\n            var isFlipped = this.$input.offset().top + offset > $document.height();\r\n\r\n            this.$el.toggleClass(this.options.resultsFlippedClass, isFlipped);\r\n\r\n        },\r\n\r\n        documentCancelEvents: function(setup, onCancel) {\r\n\r\n            var self = this;\r\n\r\n            if (setup === 'off' && this.closeEventsSetuped) {\r\n\r\n                $document.off(this.ens);\r\n                this.closeEventsSetuped = false;\r\n                return;\r\n\r\n            } else if (setup === 'on' && !this.closeEventsSetuped) {\r\n\r\n                $document.on(this.namespaceEvents('click keyup'), function(e) {\r\n\r\n                    if (keyMap[e.keyCode] === 'escape' || (!$(e.target).is(self.$el) && !$.contains(self.$el.get(0), e.target) && $.contains(document.documentElement, e.target))) {\r\n\r\n                        onCancel ? onCancel.call(self) : self.hideResults();\r\n\r\n                    }\r\n\r\n                });\r\n\r\n                this.closeEventsSetuped = true;\r\n\r\n            }\r\n\r\n        },\r\n\r\n        navigateItem: function(direction) {\r\n\r\n            var $currentItem = this.$resultItems.filter(this.focusedItemSelector),\r\n                maxPosition = this.$resultItems.length - 1;\r\n\r\n            if ($currentItem.length === 0) {\r\n\r\n                this.$resultItems.eq(direction === 'up' ? maxPosition : 0).addClass(this.options.focusedItemClass);\r\n                return;\r\n\r\n            }\r\n\r\n            var currentPosition = this.$resultItems.index($currentItem),\r\n                nextPosition = direction === 'up' ? currentPosition - 1 : currentPosition + 1;\r\n\r\n            nextPosition > maxPosition && (nextPosition = 0);\r\n            nextPosition < 0 && (nextPosition = maxPosition);\r\n\r\n            $currentItem.removeClass(this.options.focusedItemClass);\r\n\r\n            this.$resultItems.eq(nextPosition).addClass(this.options.focusedItemClass);\r\n\r\n        },\r\n\r\n        navigateDown: function() {\r\n\r\n            this.navigateItem('down');\r\n\r\n        },\r\n\r\n        navigateUp: function() {\r\n\r\n            this.navigateItem('up');\r\n\r\n        },\r\n\r\n        onEnter: function(e) {\r\n\r\n            var $currentItem = this.$resultItems.filter(this.focusedItemSelector);\r\n\r\n            if ($currentItem.length) {\r\n                e.preventDefault();\r\n                this.handleItemSelect($currentItem);\r\n            }\r\n\r\n        },\r\n\r\n        handleItemSelect: function($item) {\r\n\r\n            var selectOption = this.options.onItemSelect,\r\n                model = this.itemModels.length ? this.itemModels[this.$resultItems.index($item)] : {};\r\n\r\n            this.$input.trigger('itemSelected');\r\n\r\n            if (selectOption === 'fillInput') {\r\n\r\n                this.fillInput(model);\r\n\r\n            } else if (selectOption === 'follow') {\r\n\r\n                window.location.href = $item.attr('href');\r\n\r\n            } else if (typeof selectOption === 'function') {\r\n\r\n                selectOption.call(this, $item, model, this);\r\n\r\n            }\r\n\r\n        },\r\n\r\n        fillInput: function(model) {\r\n\r\n            var options = this.options,\r\n                format = options.responseFormat;\r\n\r\n            this.query = model[format.label];\r\n            this.$input.val(model[format.label]).trigger('change');\r\n\r\n            if (options.fillInputId && model.id) {\r\n\r\n                if (!this.$inputId) {\r\n\r\n                    var inputIdName = options.inputIdName || this.$input.attr('name') + '_id';\r\n\r\n                    this.$inputId = this.$el.find('input[name=\"' + inputIdName + '\"]');\r\n\r\n                    if (!this.$inputId.length) {\r\n                        this.$inputId = $('<input type=\"hidden\" name=\"' + inputIdName + '\" />').appendTo(this.$el);\r\n                    }\r\n\r\n                }\r\n\r\n                this.$inputId.val(model.id).trigger('change');\r\n\r\n            }\r\n\r\n            this.hideResults();\r\n\r\n        },\r\n\r\n        hideResults: function() {\r\n\r\n            if (this.resultsOpened) {\r\n\r\n                this.resultsOpened = false;\r\n                this.$el.removeClass(this.options.resultsOpenedClass);\r\n                this.$input.trigger('closingResults');\r\n                this.documentCancelEvents('off');\r\n\r\n            }\r\n\r\n            return this;\r\n\r\n        },\r\n\r\n        clear: function() {\r\n\r\n            this.hideResults();\r\n            this.$input.val('').trigger('change');\r\n\r\n            return this;\r\n\r\n        },\r\n\r\n        destroy: function() {\r\n\r\n            $document.off(this.ens);\r\n\r\n            this.$input.off(this.ens);\r\n\r\n            this.$el.off(this.ens)\r\n                .removeClass(this.options.resultsOpenedClass)\r\n                .removeClass(this.options.loadingClass);\r\n\r\n            if (this.$resultsCont) {\r\n\r\n                this.$resultsCont.remove();\r\n                delete this.$resultsCont;\r\n\r\n            }\r\n\r\n            delete this.$el.data().fastsearch;\r\n\r\n        }\r\n\r\n    });\r\n\r\n    $.extend(Fastsearch, {\r\n\r\n        pickTo: function(dest, src, keys) {\r\n\r\n            $.each(keys, function(i, key) {\r\n                dest[key] = (src && src[key]) || dest[key];\r\n            });\r\n\r\n            return dest;\r\n\r\n        },\r\n\r\n        selectorFromClass: function(classes) {\r\n\r\n            return '.' + classes.replace(/\\s/g, '.');\r\n\r\n        }\r\n\r\n    });\r\n\r\n    Fastsearch.defaults = {\r\n        wrapSelector: 'form', // fastsearch container defaults to closest form. Provide selector for something other\r\n        url: null, // plugin will get data from data-url propery, url option or container action attribute\r\n        responseType: 'JSON', // default expected server response type - can be set to html if that is what server returns\r\n        preventSubmit: false, // prevent submit of form with enter keypress\r\n\r\n        resultsContClass: 'fs_results', // html classes\r\n        resultsOpenedClass: 'fsr_opened',\r\n        resultsFlippedClass: 'fsr_flipped',\r\n        groupClass: 'fs_group',\r\n        itemClass: 'fs_result_item',\r\n        groupTitleClass: 'fs_group_title',\r\n        loadingClass: 'loading',\r\n        noResultsClass: 'fs_no_results',\r\n        focusedItemClass: 'focused',\r\n\r\n        typeTimeout: 140, // try not to hammer server with request for each keystroke if possible\r\n        minQueryLength: 2, // minimal number of characters needed for plugin to send request to server\r\n\r\n        template: null, // provide your template function if you need one - function(data, fastsearchApi)\r\n        mouseEvents: !('ontouchstart' in window || navigator.maxTouchPoints > 0 || navigator.msMaxTouchPoints > 0), // detect if client is touch enabled so plugin can decide if mouse specific events should be set.\r\n        focusFirstItem: false,\r\n        flipOnBottom: false,\r\n\r\n        responseFormat: { // Adjust where plugin looks for data in your JSON server response\r\n            url: 'url',\r\n            html: 'html',\r\n            label: 'label',\r\n            groupCaption: 'caption',\r\n            groupItems: 'items'\r\n        },\r\n\r\n        fillInputId: true, // on item select plugin will try to write selected id from item data model to input\r\n        inputIdName: null, // on item select plugin will try to write selected id from item data model to input with this name\r\n\r\n        apiInputName: null, // by default plugin will post input name as query parameter - you can provide custom one here\r\n\r\n        noResultsText: 'No results found',\r\n        onItemSelect: 'follow', // by default plugin follows selected link - other options available are \"fillInput\" and custom callback - function($item, model, fastsearchApi)\r\n\r\n        parseResponse: null, // parse server response with your handler and return processed data - function(response, fastsearchApi)\r\n        onResultsCreate: null, // adjust results element - function($allResults, data, fastsearchApi)\r\n        onGroupCreate: null, // adjust group element when created - function($group, groupModel, fastsearchApi)\r\n        onItemCreate: null // adjust item element when created - function($item, model, fastsearchApi)\r\n    };\r\n\r\n    $.fastsearch = Fastsearch;\r\n\r\n    $.fn.fastsearch = function(options) {\r\n        return this.each(function() {\r\n            if (!$.data(this, 'fastsearch')) {\r\n                $.data(this, 'fastsearch', new Fastsearch(this, options));\r\n            }\r\n        });\r\n    };\r\n\r\n    return $;\r\n\r\n}));\r\n"]}